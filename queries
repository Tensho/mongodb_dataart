use pm

// ================================================================================
// 1. Get user by domain login.
// ================================================================================
db.users.findOne({
  'domain_login': 'sawayn.net'
})

// Add single field index for domain login.
// This index can prevent the above query on domain login from scanning the whole collection to return the results.
db.users.ensureIndex({
  'domain_login': 1
})

// Boosted
db.users.findOne({
  'domain_login': 'sawayn.net'
})

// ================================================================================
// 2. Get users with summer birthday.
// ================================================================================
db.users.aggregate([
  {
    $project: {
      full_name: 1,
      birthday: 1,
      birthday_month: { $month: "$birthday" },
      email: 1,
      phone: 1,
      position: 1,
      status: 1,
      photo: 1,
      domain_login: 1
    }
  },
  {
    $match: {
      birthday_month: { $gte: 5, $lte: 7 }
    }
  }
])

// Can't use any index, because match stage is not on the first place.

// ================================================================================
// 3. Get users with tomorrow birthday.
// ================================================================================
db.users.aggregate([
  {
    $project: {
      full_name: 1,
      birthday: 1,
      birthday_month: { $month: "$birthday" },
      birthday_day: { $dayOfMonth: "$birthday" },
      email: 1,
      phone: 1,
      position: 1,
      status: 1,
      photo: 1,
      domain_login: 1
    }
  },
  {
    $match: {
      birthday_month: { $eq: new Date().getMonth() + 1 },
      birthday_day: { $eq: new Date().getDate() + 1 },
    }
  }
])

// Can't use any index, because match stage is not on the first place.

// ================================================================================
// 4. Get users with name "Arnold" and last name starting with "Z".
// ================================================================================
db.users.find({
  full_name: /Arnold Z/
})

// Add single field index for full name.
// MongoDB matches the regular expression against the values in the index, which can be faster than a collection scan. Further optimization can occur if the regular expression is a “prefix expression”, which means that all potential matches start with the same string. This allows MongoDB to construct a “range” from that prefix and only match against those values from the index that fall within that range.
db.users.ensureIndex({
  'full_name': 1
})

// Boosted
db.users.find({
  full_name: /^Arnold Z/
})

// ================================================================================
// 5. Get the most popular wish user id.
// ================================================================================
db.users.aggregate([
 {
     $unwind: "$wish_user_ids"
 },
 {
     $group: { _id: "$wish_user_ids", count: { $sum: 1 } }
 },
 {
     $sort: { count: -1 }
 },
 {
     $limit: 1
 },
 {
     $project: { _id: 1 }
 }
])

// Can't use any index, because there is no match, sort, skip or limit stage on the first place.

// ================================================================================
// 6. Get open projects.
// ================================================================================
db.projects.find({
  status: 'opened'
})

// Add single field index for status.
// This index can prevent the above query on status from scanning the whole collection to return the results.
db.projects.ensureIndex({
  'status': 1
})

// Boosted
db.projects.find({
  status: 'opened'
})

// ================================================================================
// 7. Get total budget of closed projects.
// ================================================================================
db.projects.aggregate([
  {
    $match: { status: 'closed' }
  },
  {
    $group: { _id: null, total_budget: { $sum: "$budget" } }
  },
  {
    $project: { _id: 0, total_budget: 1 }
  }
])

// Add single field index for status.
// This index can prevent the above query on status from scanning the whole collection to return the results.
db.projects.ensureIndex({
  'status': 1
})

// Boosted
db.projects.aggregate([
  {
    $match: { status: 'closed' }
  },
  {
    $group: { _id: null, total_budget: { $sum: "$budget" } }
  },
  {
    $project: { _id: 0, total_budget: 1 }
  }
])

// ================================================================================
// 8. Get average participants in project.
// ================================================================================
db.projects.aggregate([
  {
    $project: { count_participants: { $size: "$participant_ids" } }
  },
  {
    $group: { _id: null, avg_participants: { $avg: "$count_participants" } }
  }
])

// Can't use any index, because there is no match, sort, skip or limit stage on the first place.

// ================================================================================
// 9. Get projects name of the most loaded participant.
// ================================================================================
db.projects.aggregate([
  {
      $unwind: "$participant_ids"
  },
  {
      $group: { _id: "$participant_ids", projects: { $push: "$name" }, quantity: { $sum: 1 } }
  },
  {
      $sort: { quantity: -1 }
  },
  {
      $limit: 1
  },
  {
      $project: { _id: 0, projects: "$projects" }
  }
])

// ================================================================================
// 10. Get number of closed tasks.
// ================================================================================
db.tasks.count({
  status: 'closed'
})

// Add single field index for status.
// This index can prevent the above query on status from scanning the whole collection to return the results.
db.tasks.ensureIndex({
  'status': 1
})

// Boosted
db.tasks.count({
  status: 'closed'
})

// ================================================================================
// 11. Get in progress tasks.
// ================================================================================
db.tasks.find({
  status: 'in_progress'
})

// Add single field index for status.
// This index can prevent the above query on status from scanning the whole collection to return the results.
db.tasks.ensureIndex({
  'status': 1
})

// Boosted
db.tasks.find({
  status: 'in_progress'
})

// ================================================================================
// 12. Get tasks with 'deadline' word in description.
// ================================================================================
db.tasks.find({
  description: /\deadline\b/
})

// Single field index will not optimize query, because of regular expression is not “prefix expression”, but word can appear at any place in the description.
// Add text index for description.

db.tasks.ensureIndex({
  description: "text"
})

// Boosted
db.tasks.find({
  $text: { $search: 'deadline' }
})

// ================================================================================
// 13. Get opened, in progress, reopened tasks for user with start date sort.
// ================================================================================
db.tasks.find({
  status: { $in: ['opened', 'in_progress', 'reopened'] },
  responsible_id: ObjectId("540ea11774656e2936f00100")
}).sort({
  start_date: 1
})

// Add compound index for status, responsible_id and start_date.
// Put status on the last place for better performance, because of range type query ($in).
db.tasks.ensureIndex({
  'responsible_id': 1,
  'start_date': 1,
  'status': 1
})

// Boosted
db.tasks.find({
  status: { $in: ['opened', 'in_progress', 'reopened'] },
  responsible_id: ObjectId("540ea11774656e2936f00100")
}).sort({
  start_date: 1
})
